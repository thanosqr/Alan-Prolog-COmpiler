;declare void @writeInteger(i16)
;declare void @writeByte(i8)
;declare void @writeChar(i8)
;declare i16 @readInteger()
;declare i8 @readByte()
;declare i8 @readChar()
;declare i8 @shrink(i16)
;declare i16 @extend(i8)

@.str = private constant [3 x i8] c"%d\00"
@.strc = private constant [3 x i8] c"%c\00"
@.strdh = private constant [4 x i8] c"%hd\00"


define void @writeChar(i8 %i)  {
  %1 = alloca i8
  store i8 %i, i8* %1
  %2 = load i8* %1
  %3 = zext i8 %2 to i32
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.strc, i32 0, i32 0), i32 %3)
  ret void
}

define void @writeInteger(i16 %i) {
  %1 = alloca i16
  store i16 %i, i16* %1
  %2 = load i16* %1
  %3 = sext i16 %2 to i32
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %3)
  ret void
}

define void @writeByte(i8 %i) {
  %1 = alloca i8
  store i8 %i, i8* %1
  %2 = load i8* %1
  %3 = zext i8 %2 to i32
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %3)
  ret void
}


define i16 @readInteger() {
  %i = alloca i16
  %1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([4 x i8]* @.strdh, i32 0, i32 0), i16* %i)
  %2 = load i16* %i
  ret i16 %2
}

define i8 @readByte() {
       %1 = call i16 @readInteger()
       %2 = trunc i16 %1 to i8
       ret i8 %2
}

define i8 @readChar() {

  %i = alloca i8
  %1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.strc, i32 0, i32 0), i8* %i)
  %2 = load i8* %i
  ret i8 %2
       
}

define i16 @extend(i8 %b){
       %i = zext i8 %b to i16
       ret i16 %i
}

define i8 @shrink(i16 %i){
       %b = trunc i16 %i to i8
       ret i8 %b
}

declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)